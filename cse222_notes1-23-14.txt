SDN: Software-defined networking (a control paradigm where low level details are abstracted away from protocol implementation)
NIB: Network Information Base; data structure that represents the copy of the network state stored by Onix

What I'm not sure about: Control plane.  In terms of satellite transmissions, control plane refers to data sent that coordinate transmissions over a wireless network.  I'm not entirely sure what coordination messages currently pass among routers; as I understood it, most routers are dumb devices implementing a well-known routing protocol, with little to no control information.  I suppose the control plane could be information meant for the routers themselves, but then what exactly is the problem? Does Onix provide a simple way of updating the routing controls, or is the idea that this lets you implement new routing protocols?
I notice that this is a newer paper, even though the exact date is not specified it can be no more than four years old.

So, Onix seems to be a way of making the implementation or update of new protocols simpler.  Not sure what layer this is supposed to reside on
Onix is a way of distributing routing information to routers and other network devices, referred to as distributing state.  E.g., Onix provides a platform on which developers can define new ways of controlling routers, without having to worry about distributing state information or new protocol implementations to the routers.  All the routers have to do is be able to receive Onix data, and do basic connectivity stuff.



Contributions
This paper presents Onix, a platform that allows developers to create and deploy a distributed control plane separated from the low-level routing information.  Onix provides a method for distributing network state information to different routers and between different Onix instances, allowing the user to develop control software without worrying about how to distribute state among different routers and network devices.  They present several sample applications, including a security application which approves new flows before forwarding them; a distributed virtual switch for networks where edge hosts are virtual switches that can be added, deleted, or moved; a manager of multiple sub-networks that may share hardware and address space; and a standard BGP IP router, implemented over the Onix network instead of within a single chassis.  Onix and similar platfroms could greatly improve network development and deployment.

Weaknesses
As far as I understand, Onix seems to be a way to distribute routing protocol information among different servers on a given network.  Routers using Onix will be dumber than usual, unable to update their own state information should their connection to the Onix servers be lost.  The paper isn't proposing that the entire internet be managed by Onix, however; instead, a private network within the internet could use Onix to manage network state with greater ease on the part of the network developer.  Therefore, the fact that Onix appears to be less robust than a fully distributed state distribution method might be less of an issue.  By "fully distributed," I mean that the routers maintain and update all state information.  A private network can take whatever steps necessary to ensure that Onix is sufficiently robust to withstand the type of failures possible within said network.
The fact that Onix is too slow to update state on a per-packet basis may also present a serious limitation.  If the network designers want this feature, perhaps to use data plane packages to infer control plane state, they may still be faced with the problems of distributing this information throughout their network.

Implications
If Onix or similar platforms become widely used, then it seems that updating the network state will be divided into two camps: that which can be updated through the high-level platform API, and that which must be implemented on the lower levels.  The high-level parts will be greatly improved, in that now they are easier to build, update, and deploy, but the low-level parts may still possess the same problems that this paper sought to solve.  So, this paper merely pushed off one set of problems.  I did not recognize any attempt in the paper to provide a mechanism by which low-level routing software can be fixed or updated.
This may present security indications as well.  If Onix becomes a commonly used standard, is it possible to design attacks based on the control plane network?  It may be possible to trick a router into thinking that it communicates with an Onix instance if the data plane and control plane share a physical network  As with all new technology, if it becomes popular enough, it could be a new attack vector.