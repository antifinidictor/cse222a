
Paper Summary
The paper presents PortLand, a layer-two routing protocol.  They aim to have all the advantages of the Fat Tree architecture in a layer two network, allowing for faster speeds.  Their solution largely seems to be a virtual address protocol: Objects have two addresses, the actual mac address (AMAC) and pseudo mac address (PMAC).  The actual mac address I assume is connected to the actual device and moves with the device, while the pseduo-mac address is related to their network location.  ARPS are used to propogate changes in network structure, such as moving a VM.  They introduce the one-directional-change routing property, which ensures that loops can never occur by never allowing a router to send packets received on an uplink back up another uplink.  While this forces packets to change direction at most once, it does mean a routing error could lead to dropped packets.  They also made their network a 'plug-and-play' network as much as possible, in that routers could mostly discover their location in the fat tree through a location discovery protocol.  The LDP infers router level by observing the number of other routers they connect to, and which routers appear to be uplinks or downlinks.  They tested and implemented a moderate-sized data center network using routers with open flow support.

Note: Look up specific protocol name for how their algorithm creates macs.
To avoid the standard layer-two spanning tree routing, they implemented their routing protocol with openflow.  I would guess that this might make it slightly slower, but they did

Contributions
The paper presents PortLand, a layer two network setup for data centers.  They aim to have all the advantages of the Fat Tree architecture in a layer two network, allowing for mobile hosts.  Their solution largely seems to be a virtual address protocol: Objects have two addresses, the actual mac address (AMAC) and pseudo mac address (PMAC).  The actual mac address I assume is connected to the actual device and moves with the device, while the pseduo-mac address is related to their network location.  ARPS are used to propogate changes in network structure, such as moving a VM.  They introduce the one-directional-change routing property, which ensures that loops can never occur by never allowing a router to send packets received on an uplink back up another uplink.  While this forces packets to change direction at most once, it does mean a routing error could lead to dropped packets.  They also made their network a 'plug-and-play' network as much as possible, in that routers could mostly discover their location in the fat tree through a location discovery protocol.  The LDP infers router level by observing the number of other routers they connect to, and which routers appear to be uplinks or downlinks.  They tested and implemented a moderate-sized data center network using routers with open flow support.  A layer 2 fat-tree topology could mean much more efficient data center networks.

Shortcomings
In their evaluation, the authors failed to provide an analysis of existing systems in comparison to PortLand.  While they explained the failures present in other layer two datacenter routing systems, they did not show that they tested them under the same conditions.  Their performance figures would be greatly strengthened by in-study comparisons of other products, since we could verify that the designs were subject to the same types of tests.  Given the lack of appropriate comparison, we will have to make do with external studies of the performance of comparitive products and attempt to reconcile the different tests.  Although I personally agree with the authors that their design is a viable layer-two solution, I think the lack of comparison is a serious weakness in their argument.  Whether this was by choice, an oversight, or for reasons beyond their control, I cannot say.
I also have to question the architecture's scalability.  Unless I misunderstood the analyses, it struck me that PortLand may have trouble with control traffic as it scales; increasing the number of hosts resulted in a linear increase in the amount of control traffic/ARP requests sent.  This is to be expected, as more routers mean more routers sending location-discovery messages and hosts sending ARPs, and most of the control traffic does not need to be called frequently.  Nevertheless, I was under the impression that they mostly tested their network on a moderate-sized layout.  Indeed, most of their tests seemed to be aimed at how well the system handles different situations, not how different sized versions of the same system handle different situations.  The authors seemed to almost brush off the fat tree layout, saying that they used it mostly because it was how their test network had already been set up.  However, the fat tree architecture is an important support for their paper, as they are adjusting the layer two routing protocols to enable efficient support for a dynamic, redundant network.

Implications
PortLand is presented as a magical data center network solution, overcoming most of the problems with layer 3 and layer 2 protocols.  If my concerns about scalability are invalid or at least nullified, then this could revolutionize data center efficiency; the advantages of layer three routing flexibility combined with layer two address flexibility make this a must-have architecture for data centers.  I would expect most cloud data centers to use a similar architecture if all of the advantages are as presented by the authors.
If the scalability of the network's control traffic is any guide, however, then it may be that a new design will be necessary for the cores handling the Fabric Manager.  In worst-case scenarios, the authors demonstrated that the control traffic was too much to be handled by a single machine, and either multiple machines might be required to represent a single core, or special purpose routers might be required to replace them.  This is perhaps better than all machines requiring specialized, non-commodity nodes, but it does reduce some of the fat tree topology's advantages as presented in the previous paper.
